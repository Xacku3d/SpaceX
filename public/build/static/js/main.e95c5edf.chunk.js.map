{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Pagination.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_year","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","react_router_dom","to","concat","MissionKey","PaginateRight","isLastPagintaion","changePaginationRight","onClick","PaginateLeft","_ref2","isFirstPagination","changePaginationLeft","Pagination","_ref3","launchesPerPage","totalLaunches","paginate","pageNumbers","i","Math","ceil","push","_useState","useState","_useState2","Object","slicedToArray","firstNumber","setFirstNumber","_useState3","_useState4","lastNumber","setLastNumber","_useState5","_useState6","setLastPagination","_useState7","_useState8","isFirstPagintaion","setFirstPagination","Pagination_PaginateLeft","pageLimit","slice","map","number","key","Pagination_PaginateRight","length","LAUNCHES_QUERY","gql","_templateObject","Launches","currentPage","setCurrentPage","setTotalLaunches","indexOfLastLaunch","indexOfFirstLaunch","useEffect","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","axios","get","sent","data","stop","apply","this","arguments","fetchLaunches","react","pageNumber","react_apollo_esm","query","loading","error","launches","LAUNCH_QUERY","Launch_templateObject","Launch","parseInt","window","location","href","variables","console","log","rocket","rocket_name","rocket_type","client","ApolloClient","uri","App","align","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e95c5edf.chunk.js","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function LaunchItem({\r\n    launch: {\r\n        flight_number,\r\n        mission_name,\r\n        launch_year,\r\n        launch_date_local,\r\n        launch_success\r\n    }\r\n}) {\r\n    return (\r\n        <div className=\"card card-body mb-3\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-9\">\r\n                    <h4>Mission: <span className={classNames({\r\n                        'text-success': launch_success,\r\n                        'text-danger': !launch_success\r\n                    })}>{ mission_name }</span></h4>\r\n                    <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></p>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Watch Details</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function MissionKey() {\r\n    return (\r\n        <div className=\"my-3\">\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-success\"></span> = Success\r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-danger\"></span> = Fail\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState} from 'react';\r\n\r\nconst PaginateRight = ({isLastPagintaion, changePaginationRight}) => {\r\n    if(!isLastPagintaion){\r\n    return (\r\n        <li>\r\n            <a onClick={() => changePaginationRight()} className=\"page-link\">{\">>\"}</a>\r\n        </li>\r\n    )\r\n    } else {\r\n        return (null);\r\n    }\r\n}\r\n\r\nconst PaginateLeft = ({isFirstPagination, changePaginationLeft}) => {\r\n    if(!isFirstPagination){\r\n        return (\r\n            <li>\r\n                <a onClick={() => changePaginationLeft()} className=\"page-link\">{\"<<\"}</a>\r\n            </li>\r\n        )\r\n    } else {\r\n        return (null);\r\n    }\r\n}\r\n\r\nexport default function Pagination({launchesPerPage, totalLaunches, paginate}) {\r\n    const pageNumbers = [];\r\n\r\n    for(let i=1; i <= Math.ceil(totalLaunches / launchesPerPage); i++){\r\n        pageNumbers.push(i);\r\n    }\r\n\r\n    const pageLimit = 10;\r\n    const [firstNumber, setFirstNumber] = useState(0);\r\n    const [lastNumber, setLastNumber] = useState(pageLimit);\r\n    const [isLastPagintaion, setLastPagination] = useState(false);\r\n    const [isFirstPagintaion, setFirstPagination] = useState(true);\r\n\r\n    const changePaginationRight = () => {\r\n        if ((lastNumber + pageLimit) > pageNumbers.length) {\r\n            setFirstNumber(lastNumber);\r\n            setLastNumber(pageNumbers.length);\r\n            setLastPagination(true);\r\n        } else {\r\n            setFirstNumber(lastNumber);\r\n            setLastNumber(lastNumber + pageLimit);\r\n            setFirstPagination(false);\r\n        }\r\n    }\r\n\r\n    const changePaginationLeft = () => {\r\n        if((firstNumber-pageLimit) == 0){\r\n            setFirstPagination(true);\r\n            setLastNumber(firstNumber);\r\n            setFirstNumber(lastNumber - pageLimit * 2);\r\n        } else if(isLastPagintaion) {\r\n            setLastPagination(false);\r\n            setLastNumber(firstNumber);\r\n            setFirstNumber(lastNumber - pageLimit - 1);\r\n        } else {\r\n            setLastPagination(false);\r\n            setLastNumber(firstNumber);\r\n            setFirstNumber(lastNumber - pageLimit * 2);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <ul className=\"pagination\">\r\n                <PaginateLeft changePaginationLeft={changePaginationLeft} isFirstPagination={isFirstPagintaion}/>\r\n                {pageNumbers.slice(firstNumber, lastNumber).map(number => (\r\n                    <li key={number} className=\"page-item\">\r\n                        <a onClick={() => paginate(number)} className=\"page-link\">\r\n                            {number}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n                <PaginateRight changePaginationRight={changePaginationRight} isLastPagintaion={isLastPagintaion}/>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n","import React, {Fragment, useState, useEffect} from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey';\r\nimport Pagination from './Pagination';\r\nimport axios from 'axios';\r\n\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n    {\r\n        launches {\r\n          flight_number\r\n          mission_name\r\n          launch_year\r\n          launch_date_local\r\n          launch_success\r\n        }\r\n    }\r\n`;\r\n\r\nexport default function Launches() {\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [launchesPerPage] = useState(5);\r\n    const [totalLaunches, setTotalLaunches] = useState(0);\r\n    \r\n    const indexOfLastLaunch = currentPage * launchesPerPage;\r\n    const indexOfFirstLaunch = indexOfLastLaunch - launchesPerPage;\r\n\r\n    useEffect(() => {\r\n        const fetchLaunches = async () => {\r\n            const totalLaunches = await axios.get('https://api.spacexdata.com/v3/launches');\r\n            setTotalLaunches(totalLaunches.data.length);\r\n        }\r\n        fetchLaunches();\r\n    });\r\n\r\n    const paginate = (pageNumber) =>{\r\n        setCurrentPage(pageNumber);\r\n    }\r\n\r\n    return(\r\n        <Fragment>\r\n            <h3 className=\"display-4 my-3\">Launches</h3>\r\n            <MissionKey/>\r\n            <Pagination launchesPerPage={launchesPerPage} totalLaunches={totalLaunches} paginate={paginate}/>\r\n            <Query query={LAUNCHES_QUERY}>\r\n                {({ loading, error, data }) => {\r\n                        if(loading) return <h4>Loading...</h4>;\r\n                        if(data) {\r\n                        return <Fragment>\r\n                            {\r\n                                data.launches.slice(indexOfFirstLaunch,indexOfLastLaunch).map(launch => (\r\n                                    <LaunchItem key={launch.flight_number} launch={launch}/>\r\n                                ))\r\n                            }\r\n                        </Fragment>\r\n                        }\r\n                        return <h4>Error: API is down</h4>\r\n                        }}\r\n            </Query>\r\n        </Fragment>\r\n    );\r\n} \r\n","import React, { Fragment } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport { Link } from 'react-router-dom';\r\nimport Moment from 'react-moment';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n    query LaunchQuery($flight_number: Int!) {\r\n        launch(flight_number: $flight_number) {\r\n            flight_number\r\n            mission_name\r\n            launch_date_local\r\n            launch_success\r\n            rocket {\r\n                rocket_name,\r\n                rocket_type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default function Launch() {\r\n    let flight_number = parseInt(window.location.href.slice(-1));\r\n    return (\r\n        <Fragment>\r\n            <Query query={LAUNCH_QUERY} variables={{flight_number}}>\r\n                {\r\n                    ({ loading, error, data }) => {\r\n                        if(loading) return <h4>Loading...</h4>;\r\n                        if(error) console.log(error);\r\n                        return <div>\r\n                            <h1 className=\"display-4 my-3\"> Mission: <span className=\"text-light\">{data.launch.mission_name} </span>\r\n                             {data.launch.launch_success?\r\n                                <span className=\"text-success\">(Success)</span>:\r\n                                <span className=\"text-danger\">(Fail)</span>}\r\n                            </h1>\r\n                            <h4 className=\"my-3\"> Date: <span className=\"text-light\"><Moment format=\"YYYY-MM-DD HH:mm\">{data.launch.launch_date_local}</Moment> </span></h4>\r\n                            <h4 className=\"my-3\"> Rocket Name: <span className=\"text-light\">{data.launch.rocket.rocket_name} </span></h4>\r\n                            <h4 className=\"my-3\"> Rocket Type: <span className=\"text-light\">{data.launch.rocket.rocket_type} </span></h4>\r\n                            <div className=\"my-4\">\r\n                                <Link to={`/`} className=\"btn btn-secondary\">Return to the main page</Link>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                }\r\n            </Query>\r\n        </Fragment>\r\n    )\r\n}\r\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport { ApolloProvider } from 'react-apollo';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <h1 align=\"center\" className=\"my-3\">SpaceX</h1>\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}